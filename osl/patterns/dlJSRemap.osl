#include "../include/dlJSUtils.h"


/*
*/
shader dlJSRemap
(
	color i_color_rgb = color(0.0)
        [[  string help = "Color that will be remapped using two ranges, one for the input and the other for "
                "the output, as return the result as the output color."
                "<br/><br/>Formula: <b>mix(min, max, (color - min) / "
                "(max - min) )</b>",
            string label = "Color RGB",
            string widget = "number" ]],
	float i_color_r = 0.0
        [[  string label = "Color R",
            string widget = "null" ]],
	float i_color_g = 0.0
        [[  string label = "Color G",
            string widget = "null" ]],
	float i_color_b = 0.0
        [[  string label = "Color B",
            string widget = "null" ]],
	color i_min_rgb = color(0.0)
        [[  string help = "Minimum of the input range that will be used to remap the input color.",
            string label = "Min",
            string page = "Range.Input",
            string widget = "number" ]],
	float i_min_r = 0.0
        [[  string label = "Min R",
            string page = "Range.Input",
            string widget = "null" ]],
	float i_min_g = 0.0
        [[  string label = "Min G",
            string page = "Range.Input",
            string widget = "null" ]],
	float i_min_b = 0.0
        [[  string label = "Min B",
            string page = "Range.Input",
            string widget = "null" ]],
	color i_max_rgb = color(1.0)
        [[  string help = "Maximum of the input range that will be used to remap the input color.",
            string label = "Max",
            string page = "Range.Input",
            string widget = "number" ]],
	float i_max_r = 1.0
        [[  string label = "Max R",
            string page = "Range.Input",
            string widget = "null" ]],
	float i_max_g = 1.0
        [[  string label = "Max G",
            string page = "Range.Input",
            string widget = "null" ]],
	float i_max_b = 1.0
        [[  string label = "Max B",
            string page = "Range.Input",
            string widget = "null" ]],
    int i_clamp = 1
        [[  string help = "Define whether or not the input color should be clamped between the input min and max.",
            string label = "Clamp",
            string page = "Range.Input",
            string widget = "checkBox" ]],
    color o_min_rgb = color(0.0)
        [[  string help = "Minimum of the output range that will be used to remap the input color.",
            string label = "Min",
            string page = "Range.Output",
            string widget = "number" ]],
	float o_min_r = 0.0
        [[  string label = "Min R",
            string page = "Range.Output",
            string widget = "null" ]],
	float o_min_g = 0.0
        [[  string label = "Min G",
            string page = "Range.Output",
            string widget = "null" ]],
	float o_min_b = 0.0
        [[  string label = "Min B",
            string page = "Range.Output",
            string widget = "null" ]],
	color o_max_rgb = color(1.0)
        [[  string help = "Maximum of the output range that will be used to remap the input color.",
            string label = "Max",
            string page = "Range.Output",
            string widget = "number" ]],
	float o_max_r = 1.0
        [[  string label = "Max R",
            string page = "Range.Output",
            string widget = "null" ]],
	float o_max_g = 1.0
        [[  string label = "Max G",
            string page = "Range.Output",
            string widget = "null" ]],
	float o_max_b = 1.0
        [[  string label = "Max B",
            string page = "Range.Output",
            string widget = "null" ]],
    int o_clamp = 1
        [[  string help = "Define whether or not the output color should be clamped between 0 and 1.",
            string label = "Clamp",
            string page = "Range.Output",
            string widget = "checkBox" ]],
	color i_bias_rgb = color(0.5)
        [[  string help = "TODO.",
            string label = "Bias",
            string page = "Remap" ]],
	float i_bias_r = 0.5
        [[  string label = "Bias R",
            string page = "Remap",
            string widget = "null" ]],
	float i_bias_g = 0.5
        [[  string label = "Bias G",
            string page = "Remap",
            string widget = "null" ]],
	float i_bias_b = 0.5
        [[  string label = "Bias B",
            string page = "Remap",
            string widget = "null" ]],
	// color i_gain_rgb = 0.5
    //     [[  string help = "TODO.",
    //         string label = "Gain",
    //         string page = "Remap" ]],
	// float i_gain_r = 0.5
    //     [[  string label = "Gain R",
    //         string page = "Remap",
    //         string widget = "null" ]],
	// float i_gain_g = 0.5
    //     [[  string label = "Gain G",
    //         string page = "Remap",
    //         string widget = "null" ]],
	// float i_gain_b = 0.5
    //     [[  string label = "Gain B",
    //         string page = "Remap",
    //         string widget = "null" ]],

	output color outColor = color(0),
	output float outColorR = 0,
	output float outColorG = 0,
	output float outColorB = 0
)
{
    color input_color_rgb = getComposedColor(i_color_rgb, i_color_r, i_color_g, i_color_b);
    color input_min_rgb = getComposedColor(i_min_rgb, i_min_r, i_min_g, i_min_b);
    color input_max_rgb = getComposedColor(i_max_rgb, i_max_r, i_max_g, i_max_b);
    color output_min_rgb = getComposedColor(o_min_rgb, o_min_r, o_min_g, o_min_b);
    color output_max_rgb = getComposedColor(o_max_rgb, o_max_r, o_max_g, o_max_b);
    color bias_rgb = getComposedColor(i_bias_rgb, i_bias_r, i_bias_g, i_bias_b);
    // color gain_rgb = getComposedColor(i_gain_rgb, i_gain_r, i_gain_g, i_gain_b);
    color output_color_rgb;
    color range_factor_rgb;

    // We make sure that the input minimum and maximum are different in order to avoid dividing by zero.
    if (input_max_rgb != input_min_rgb)
    {
        range_factor_rgb = (input_color_rgb - input_min_rgb) / (input_max_rgb - input_min_rgb);

        // If requested by the user, we clamp the input color between the input min and max values, before
        // doing the actual remapping.
        if (i_clamp)
            input_color_rgb = clamp(input_color_rgb, input_min_rgb, input_max_rgb);
    }
    // If the input minimum and maximum are identical, we look at each channel of the input color, comparing it to
    // the input min, and depending on whether the former is smaller or not than the latter,
    // we respectively assign the channel the value 0 or 1.
    else
    {
        range_factor_rgb = color(
            input_color_rgb[0] < input_min_rgb[0] ? 0.0 : 1.0,
            input_color_rgb[1] < input_min_rgb[1] ? 0.0 : 1.0,
            input_color_rgb[2] < input_min_rgb[2] ? 0.0 : 1.0
        );
    }

    // If the bias value is different from 0.5, we apply a bias curve on the input range factor.
    if (bias_rgb != color(0.5))
        range_factor_rgb = color(
            getBias(range_factor_rgb[0], bias_rgb[0]),
            getBias(range_factor_rgb[1], bias_rgb[1]),
            getBias(range_factor_rgb[2], bias_rgb[2])
        );

    // WIP: Still buggy when with the input gain < 0.5.
    // If the gain value is different from 0.5, we apply a gain curve on the input range factor.
    // if (gain_rgb != color(0.5))
    //     range_factor_rgb = color(
    //         getGain(range_factor_rgb[0], gain_rgb[0]),
    //         getGain(range_factor_rgb[1], gain_rgb[1]),
    //         getGain(range_factor_rgb[2], gain_rgb[2])
    //     );

    // Applying a "mix()" on the input range factor is completing the remapping process.
    output_color_rgb = mix(output_min_rgb, output_max_rgb, range_factor_rgb);

    // If requested by the user, we clamp the output color between 0 and 1, after doing the actual remapping.
    outColor = o_clamp ? clamp(output_color_rgb, 0, 1) : output_color_rgb;

    outColorR = outColor[0];
    outColorG = outColor[1];
    outColorB = outColor[2];
}
