/*
    Check for each of the per-channel parameters of an input color if they are connected to an upstream node
    in the shading network, and if so, we use that value instead of the one coming from the color parameter instead.
*/
color getAggregateColor(color inputColor, float inputColorR, float inputColorG, float inputColorB)
{
    color aggregateColor = inputColor;

    if (isconnected(inputColorR))
        aggregateColor[0] = inputColorR;
    if (isconnected(inputColorG))
        aggregateColor[1] = inputColorG;
    if (isconnected(inputColorB))
        aggregateColor[2] = inputColorB;

    return aggregateColor;
}


/*
*/
shader dlPow(
	color inputBase = color(0)
        [[  string help = "Input base that will be used to compute its power over the input exponent, and return the "
                "result as the output color."
                "<br/><br/>Formula: <b>pow(base, exponent)</b>",
            string label = "Input 1",
            string widget = "number" ]],
	float inputBaseR = 0
        [[  string label = "Input 1 R",
            string widget = "null" ]],
	float inputBaseG = 0
        [[  string label = "Input 1 G",
            string widget = "null" ]],
	float inputBaseB = 0
        [[  string label = "Input 1 B",
            string widget = "null" ]],
	color inputExponent = color(0)
        [[  string help = "Input exponent that will be used to compute the power from the input base, and return the "
                "result as the output color."
                "<br/><br/>Formula: <b>pow(base, exponent)</b>",
            string label = "Input 2",
            string widget = "number" ]],
	float inputExponentR = 0
        [[  string label = "Input 2 R",
            string widget = "null" ]],
	float inputExponentG = 0
        [[  string label = "Input 2 G",
            string widget = "null" ]],
	float inputExponentB = 0
        [[  string label = "Input 2 B",
            string widget = "null" ]],
    int useRedChannel = 1
        [[  string help = "Define whether or not the red channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the value 0.",
            string label = "Red",
            string page = "Channels",
            string widget = "checkBox" ]],
    int useGreenChannel = 1
        [[  string help = "Define whether or not the green channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the value 0.",
            string label = "Green",
            string page = "Channels",
            string widget = "checkBox" ]],
    int useBlueChannel = 1
        [[  string help = "Define whether or not the blue channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the value 0.",
            string label = "Blue",
            string page = "Channels",
            string widget = "checkBox" ]],

	output color outColor = color(0),
	output float outColorR = 0,
	output float outColorG = 0,
	output float outColorB = 0)
{
    // We check with the "getAggregateColor()" function if anything is connected to the per-channel
    // shader parameters, and if so, we prioritize them over the values coming from the color parameters,
    // and assign them to their respective channels.
    color localInputBase = getAggregateColor(inputBase, inputBaseR, inputBaseG, inputBaseB);
    color localInputExponent = getAggregateColor(inputExponent, inputExponentR, inputExponentG, inputExponentB);

    // We are computing each channel individually depending on which the user wants to affect.
    outColor = color(
        useRedChannel ? pow(localInputBase[0], localInputExponent[0]) : 0,
        useGreenChannel ? pow(localInputBase[1], localInputExponent[1]) : 0,
        useBlueChannel ? pow(localInputBase[2], localInputExponent[2]) : 0
    );

    outColorR = outColor[0];
    outColorG = outColor[1];
    outColorB = outColor[2];
}
