#include "3delightosl.h"

#include "../include/dlJSUtils.h"


/*
*/
surface dlJSLobeEmission
(
    color i_color_rgb = color(1.0)
        [[  string help = "Color of the emission that will be used to emit light from the object.",
            string label = "Color RGB",
            string widget = "number" ]],
    float i_color_r = 0.0
        [[  string label = "Color R",
            string widget = "null" ]],
    float i_color_g = 0.0
        [[  string label = "Color G",
            string widget = "null" ]],
    float i_color_b = 0.0
        [[  string label = "Color B",
            string widget = "null" ]],
    float i_intensity = 1.0
        [[  string help = "Intensity of the emission.",
            string label = "Intensity",
            string page = "Emission",
            string widget = "number",
            float min = 0.0,
            float max = 10.0 ]],
    float i_exposure = 0.0
        [[  string help = "Exposure of the emission.",
            string label = "Exposure",
            string page = "Emission",
            string widget = "number",
            float min = -5.0,
            float max = 10.0 ]],
    int i_normalize = 0
        [[  string help = "Ensure that the amount of light emitted does not change when scaling the "
                "object.",
            string label = "Normalize",
            string page = "Emission",
            string widget = "checkBox" ]],
    float i_diffuse_contribution  = 1.0
        [[  string help = "Contribution of the emission to the diffuse component.",
            string label = "Diffuse",
            string page = "Contribution",
            string widget = "number",
            float min = 0.0,
            float max = 10.0 ]],
    float i_specular_contribution  = 1.0
        [[  string help = "Contribution of the emission to the specular component.",
            string label = "Specular",
            string page = "Contribution",
            string widget = "number",
            float min = 0.0,
            float max = 10.0 ]],
    float i_hair_contribution  = 1.0
        [[  string help = "Contribution of the emission to the hair component.",
            string label = "Hair",
            string page = "Contribution",
            string widget = "number",
            float min = 0.0,
            float max = 10.0 ]],
    float i_volume_contribution  = 1.0
        [[  string help = "Contribution of the emission to the volume component.",
            string label = "Volume",
            string page = "Contribution",
            string widget = "number",
            float min = 0.0,
            float max = 10.0 ]],


    output closure color outColor = 0
)
{
    color color_rgb = getComposedColor(i_color_rgb, i_color_r, i_color_g, i_color_b);
    float emission_scale = 1.0;
    float exposure = pow(2.0, i_exposure);
    closure color emission_aov = 0;

    if (!raytype("camera"))
    {
        emission_aov += transparent();
    }

    if(i_normalize)
    {
        emission_scale /= surfacearea();
    }

    color emission_color = color_rgb * i_intensity * exposure;

    if(raytype("diffuse") && (i_diffuse_contribution != 1.0))
        emission_color *= i_diffuse_contribution;
    else if(raytype("hair") && (i_hair_contribution != 1.0))
        emission_color *= i_hair_contribution;
    else if(raytype("specular") && (i_specular_contribution != 1.0))
        emission_color *= i_specular_contribution;
    else if(raytype("volume") && (i_volume_contribution != 1.0))
        emission_color *= i_volume_contribution;

    emission_aov += emission() * emission_color * emission_scale;
    emission_aov = outputvariable(
        "incandescence",
        emission_aov
    );

    outColor = emission_aov;
}
