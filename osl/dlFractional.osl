/*
    Check for each of the per-channel parameters of an input color if they are connected to an upstream node
    in the shading network, and if so, we use that value instead of the one coming from the color parameter instead.
*/
color getAggregateColor(color inputColor, float inputColorR, float inputColorG, float inputColorB)
{
    color aggregateColor = inputColor;

    if (isconnected(inputColorR))
        aggregateColor[0] = inputColorR;
    if (isconnected(inputColorG))
        aggregateColor[1] = inputColorG;
    if (isconnected(inputColorB))
        aggregateColor[2] = inputColorB;

    return aggregateColor;
}


float fractional(float inputFloat)
{
    if (inputFloat >= 0)
        return inputFloat - floor(inputFloat);
    else
        return inputFloat - ceil(inputFloat);
}


/*
*/
shader dlFractional(
	color inputColor = color(0)
        [[  string help = "Input color that will be used to get its fractional part, and return it as the output "
                "color."
                "<br/><br/>Formula: <b>input - floor(input)</b> if <b>input >= 0</b>, else <b>input - ceil(input)</b>",
            string label = "Input",
            string widget = "number" ]],
	float inputColorR = 0
        [[  string label = "Input R",
            string widget = "null" ]],
	float inputColorG = 0
        [[  string label = "Input G",
            string widget = "null" ]],
	float inputColorB = 0
        [[  string label = "Input B",
            string widget = "null" ]],
    int useRedChannel = 1
        [[  string help = "Define whether or not the red channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the untouched value coming from the "
                "chosen input.",
            string label = "Red",
            string page = "Channels",
            string widget = "checkBox" ]],
    int useGreenChannel = 1
        [[  string help = "Define whether or not the green channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the untouched value coming from the "
                "chosen input.",
            string label = "Green",
            string page = "Channels",
            string widget = "checkBox" ]],
    int useBlueChannel = 1
        [[  string help = "Define whether or not the blue channel should be affected."
                "<br/><br/>If turned off, the channel will instead output the untouched value coming from the "
                "chosen input.",
            string label = "Blue",
            string page = "Channels",
            string widget = "checkBox" ]],

	output color outColor = color(0),
	output float outColorR = 0,
	output float outColorG = 0,
	output float outColorB = 0)
{
    // We check with the "getAggregateColor()" function if anything is connected to the per-channel
    // shader parameters, and if so, we prioritize them over the values coming from the color parameter,
    // and assign them to their respective channels.
    color localInputColor = getAggregateColor(inputColor, inputColorR, inputColorG, inputColorB);

    // We are computing each channel individually depending on which the user wants to affect.
    if (localInputColor != color(0))
        outColor = color(
            useRedChannel ? fractional(localInputColor[0]) : localInputColor[0],
            useGreenChannel ? fractional(localInputColor[1]) : localInputColor[1],
            useBlueChannel ? fractional(localInputColor[2]) : localInputColor[2]
        );

    outColorR = outColor[0];
    outColorG = outColor[1];
    outColorB = outColor[2];
}
