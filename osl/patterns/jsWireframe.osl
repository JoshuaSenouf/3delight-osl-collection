#include "../include/jsUtils.h"


/*
*/
shader jsWireframe
(
	color i_wireframe_color_rgb = color(1.0)
        [[  string help = "Color that will be used as the wireframe color.",
            string label = "Wireframe Color",
            string widget = "number" ]],
	float i_wireframe_color_r = 0.0
        [[  string label = "Wireframe Color R",
            string widget = "null" ]],
	float i_wireframe_color_g = 0.0
        [[  string label = "Wireframe Color G",
            string widget = "null" ]],
	float i_wireframe_color_b = 0.0
        [[  string label = "Wireframe Color B",
            string widget = "null" ]],
	color i_background_color_rgb = color(0.0)
        [[  string help = "Color that will be used as the background surface color of the wireframe.",
            string label = "Background Color",
            string widget = "number" ]],
	float i_background_color_r = 0.0
        [[  string label = "Background Color R",
            string widget = "null" ]],
	float i_background_color_g = 0.0
        [[  string label = "Background Color G",
            string widget = "null" ]],
	float i_background_color_b = 0.0
        [[  string label = "Background Color B",
            string widget = "null" ]],
	float i_width = 1.0
        [[  string help = "Width that will be used to set the wireframe width/thickness.",
            string label = "Width",
            string page = "Wireframe",
            string widget = "number",
            float min = 0.0,
            float max = 5.0 ]],
    float i_opacity = 1.0
    [[  string help = "Opacity that will be used to set the wireframe opacity/visibility.",
        string label = "Opacity",
        string page = "Wireframe",
        string widget = "number",
        float min = 0.0,
        float max = 1.0 ]],

	output color outColor = color(0.0),
	output float outColorR = 0.0,
	output float outColorG = 0.0,
	output float outColorB = 0.0
)
{
    color wireframe_color_rgb = getComposedColor(
        i_wireframe_color_rgb,
        i_wireframe_color_r,
        i_wireframe_color_g,
        i_wireframe_color_b
    );
    color background_color_rgb = getComposedColor(
        i_background_color_rgb,
        i_background_color_r,
        i_background_color_g,
        i_background_color_b
    );

    float edge_u = (u >= 0.5) ? (1.0 - u) : u;
    float edge_v = (v >= 0.5) ? (1.0 - v) : v;
    float deriv_u = Dx(u);
    float deriv_v = Dy(v);

    int step_edge_u = int(step(edge_u, deriv_u * i_width));
    int step_edge_v = int(step(edge_v, deriv_v * i_width));

    // Will act as a boolean that will determine whether or not we should draw
    // the wireframe on that shading point, as per the settings the user chose.
    int is_wireframe = max(step_edge_u, step_edge_v);

    // We use a "mix()" call instead of doing if/else statements using the "is_wireframe"
    // boolean, as the OSL compiler would create needless branches.
    outColor = mix(
        background_color_rgb,
        wireframe_color_rgb,
        (is_wireframe * i_opacity)
    );

    outColorR = outColor[0];
    outColorG = outColor[1];
    outColorB = outColor[2];
}
