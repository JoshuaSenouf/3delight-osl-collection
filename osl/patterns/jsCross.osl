#include "../include/jsUtils.h"


/*
*/
shader jsCross
(
    vector i_vector1_xyz = vector(0.0)
        [[  string help = "First vector that will be used to produce a cross product with the second one, "
                "and return it as the output vector."
                "<br/><br/>Formula: <b>cross(vector1, vector2)</b>",
            string label = "Vector 1 XYZ",
            string widget = "number" ]],
    float i_vector1_x = 0.0
        [[  string label = "Vector 1 X",
            string widget = "null" ]],
    float i_vector1_y = 0.0
        [[  string label = "Vector 1 Y",
            string widget = "null" ]],
    float i_vector1_z = 0.0
        [[  string label = "Vector 1 Z",
            string widget = "null" ]],
    vector i_vector2_xyz = vector(0.0)
        [[  string help = "Second vector that will be used to produce a cross product with the first one, "
                "and return it as the output vector."
                "<br/><br/>Formula: <b>cross(vector1, vector2)</b>",
            string label = "Vector 2 XYZ",
            string widget = "number" ]],
    float i_vector2_x = 0.0
        [[  string label = "Vector 2 X",
            string widget = "null" ]],
    float i_vector2_y = 0.0
        [[  string label = "Vector 2 Y",
            string widget = "null" ]],
    float i_vector2_z = 0.0
        [[  string label = "Vector 2 Z",
            string widget = "null" ]],

    output vector outVector = vector(0.0),
    output float outVectorX = 0.0,
    output float outVectorY = 0.0,
    output float outVectorZ = 0.0
)
{
    vector vector1_xyz = getComposedVector(i_vector1_xyz, i_vector1_x, i_vector1_y, i_vector1_z);
    vector vector2_xyz = getComposedVector(i_vector2_xyz, i_vector2_x, i_vector2_y, i_vector2_z);

    outVector = cross(vector1_xyz, vector2_xyz);

    outVectorX = outVector[0];
    outVectorY = outVector[1];
    outVectorZ = outVector[2];
}
