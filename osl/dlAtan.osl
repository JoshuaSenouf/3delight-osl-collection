/*
*/
shader dlAtan(
	color inputColor1 = color(0, 0, 0)
        [[  string help = "First input vector that will be used to produce its arctangent, and return it as the "
                "output vector. The result will in the range of <b>[-pi/2 ; pi/2]</b>."
                "<br/><br/>Formula: <b>atan2(input2 / input1)</b>",
            string label = "Input 1",
            string widget = "number" ]],
	float inputColor1R = 0
        [[  string label = "Input 1 R",
            string widget = "null" ]],
	float inputColor1G = 0
        [[  string label = "Input 1 G",
            string widget = "null" ]],
	float inputColor1B = 0
        [[  string label = "Input 1 B",
            string widget = "null" ]],
	color inputColor2 = color(0, 0, 0)
        [[  string help = "Second input vector that will be used to produce its arctangent, and return it as the "
                "output vector.<br/><br/>Formula: <b>atan2(input2/input1)</b>",
            string label = "Input 2",
            string widget = "number" ]],
	float inputColor2R = 0
        [[  string label = "Input 2 R",
            string widget = "null" ]],
	float inputColor2G = 0
        [[  string label = "Input 2 G",
            string widget = "null" ]],
	float inputColor2B = 0
        [[  string label = "Input 2 B",
            string widget = "null" ]],
    int units = 0
        [[  string help = "The units in which we output the result.",
            string label = "Units",
            string widget = "mapper",
            string options = "Radians:0|Degrees:1" ]],

	output color outColor = color(0, 0, 0),
	output float outColorR = 0,
	output float outColorG = 0,
	output float outColorB = 0)
{
    color localInputColor1 = inputColor1;
    color localInputColor2 = inputColor2;

    // We check if anything is connected to the per-channel shader parameters,
    // and if so, we prioritize them over the values coming from the color parameters,
    // and assign them to their respective channels.
    if (isconnected(inputColor1R))
        localInputColor1[0] = inputColor1R;
    if (isconnected(inputColor1G))
        localInputColor1[1] = inputColor1G;
    if (isconnected(inputColor1B))
        localInputColor1[2] = inputColor1B;
    if (isconnected(inputColor2R))
        localInputColor2[0] = inputColor2R;
    if (isconnected(inputColor2G))
        localInputColor2[1] = inputColor2G;
    if (isconnected(inputColor2B))
        localInputColor2[2] = inputColor2B;

    // If we are outputting the result using radians...
    if (units == 0)
        outColor = atan2(localInputColor2, localInputColor1);
    // If we are outputting the result using degrees...
    else
        outColor = degrees(atan2(localInputColor2, localInputColor1));

    outColorR = outColor[0];
    outColorG = outColor[1];
    outColorB = outColor[2];
}
