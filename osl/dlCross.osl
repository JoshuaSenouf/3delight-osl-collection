/*
    Check for each of the per-channel parameters of an input vector if they are connected to an upstream node
    in the shading network, and if so, we use that value instead of the one coming from the vector parameter instead.
*/
vector getAggregateVector(vector inputVector, float inputVectorX, float inputVectorY, float inputVectorZ)
{
    vector aggregateVector = inputVector;

    if (isconnected(inputVectorX))
        aggregateVector[0] = inputVectorX;
    if (isconnected(inputVectorY))
        aggregateVector[1] = inputVectorY;
    if (isconnected(inputVectorZ))
        aggregateVector[2] = inputVectorZ;

    return aggregateVector;
}


/*
*/
shader dlCross(
	vector inputVector1 = vector(0)
        [[  string help = "First input vector that will be used to produce a cross product with the second one, "
                "and return it as the output vector."
                "<br/><br/>Formula: <b>cross(input1, input2)</b>",
            string label = "Input 1",
            string widget = "number" ]],
	float inputVector1X = 0
        [[  string label = "Input 1 X",
            string widget = "null" ]],
	float inputVector1Y = 0
        [[  string label = "Input 1 Y",
            string widget = "null" ]],
	float inputVector1Z = 0
        [[  string label = "Input 1 Z",
            string widget = "null" ]],
	vector inputVector2 = vector(0)
        [[  string help = "Second input vector that will be used to produce a cross product with the first one, "
                "and return it as the output vector."
                "<br/><br/>Formula: <b>cross(input1, input2)</b>",
            string label = "Input 2",
            string widget = "number" ]],
	float inputVector2X = 0
        [[  string label = "Input 2 X",
            string widget = "null" ]],
	float inputVector2Y = 0
        [[  string label = "Input 2 Y",
            string widget = "null" ]],
	float inputVector2Z = 0
        [[  string label = "Input 2 Z",
            string widget = "null" ]],

	output vector outVector = vector(0),
	output float outVectorX = 0,
	output float outVectorY = 0,
	output float outVectorZ = 0)
{
    // We check with the "getAggregateVector()" function if anything is connected to the per-channel
    // shader parameters, and if so, we prioritize them over the values coming from the vector parameters,
    // and assign them to their respective channels.
    vector localInputVector1 = getAggregateVector(inputVector1, inputVector1X, inputVector1Y, inputVector1Z);
    vector localInputVector2 = getAggregateVector(inputVector2, inputVector2X, inputVector2Y, inputVector2Z);

    outVector = cross(localInputVector1, localInputVector2);

    outVectorX = outVector[0];
    outVectorY = outVector[1];
    outVectorZ = outVector[2];
}
