/*
*/
shader dlShaderGlobals(
    string inputVariable = "P"
        [[  string help = "Shader OSL attribute that will be used as the output."
                "<br/><br/>Types: "
                "<br/>* Float: <b>u</b>, <b>v</b>, <b>time</b>, <b>dtime</b>"
                "<br/>* Color(/Closure): <b>Ci</b>"
                "<br/>* Point: <b>P</b>, <b>Ps</b>"
                "<br/>* Vector: <b>I</b>, <b>dPdu</b>, <b>dPdv</b>, <b>dPdtime</b>"
                "<br/>* Normal: <b>N</b>, <b>Ng</b>",
            string label = "Variable",
            string widget = "popup",
            string options = ""
                "P|I|N|Ng|dPdu|dPdv|Ps|u|v|time|dtime|dPdtime|Ci" ]],

	output float outFloat = 0,
    output closure color outColor = 0,
	output point outPoint = point(0),
	output float outPointX = 0,
	output float outPointY = 0,
	output float outPointZ = 0,
    output vector outVector = vector(0),
	output float outVectorX = 0,
	output float outVectorY = 0,
	output float outVectorZ = 0,
    output normal outNormal = normal(0),
	output float outNormalX = 0,
	output float outNormalY = 0,
	output float outNormalZ = 0)
{
    // We fill the correct output depending on the type of the global variable
    // requested by the user.
    // If the variable is a float...
    if (inputVariable == "u"
        || inputVariable == "v"
        || inputVariable == "time"
        || inputVariable == "dtime")
    {
        getattribute(inputVariable, outFloat);
    }
    // If the variable is a closure...
    else if (inputVariable == "Ci")
    {
        getattribute(inputVariable, outColor);
    }
    // If the variable is a point...
    else if (inputVariable == "P"
        || inputVariable == "Ps")
    {
        getattribute(inputVariable, outPoint);

        outPointX = outPoint[0];
        outPointY = outPoint[1];
        outPointZ = outPoint[2];
    }
    // If the variable is a vector...
    else if (inputVariable == "I"
        || inputVariable == "dPdu"
        || inputVariable == "dPdv"
        || inputVariable == "dPdtime")
    {
        getattribute(inputVariable, outVector);

        outVectorX = outVector[0];
        outVectorY = outVector[1];
        outVectorZ = outVector[2];
    }
    // If the variable is a normal...
    else if (inputVariable == "N"
        || inputVariable == "Ng")
    {
        getattribute(inputVariable, outNormal);

        outNormalX = outNormal[0];
        outNormalY = outNormal[1];
        outNormalZ = outNormal[2];
    }
}
